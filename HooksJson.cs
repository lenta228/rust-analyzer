using RustAnalyzer.Models;
using RustAnalyzer.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;

namespace RustAnalyzer
{
    internal static class HooksJson
    {
        /// <summary>
        /// Provides access to the Rust plugin hook definitions.
        /// </summary>
        public const string Json = "{\r\n  \"hooks\": [\r\n    \"CanAcceptItem(ItemContainer,Item,int)\",\r\n    \"CanAccessVendingMachine(DeliveryDroneConfig,VendingMachine)\",\r\n    \"CanAdministerVending(BasePlayer,NPCVendingMachine)\",\r\n    \"CanAdministerVending(BasePlayer,VendingMachine)\",\r\n    \"CanAffordToPlace(BasePlayer,Planner,Construction)\",\r\n    \"CanAffordUpgrade(BasePlayer,BuildingBlock,BuildingGrade.Enum,ulong)\",\r\n    \"CanAssignBed(BasePlayer,SleepingBag,ulong)\",\r\n    \"CanAssignMission(BasePlayer,BaseMission,IMissionProvider)\",\r\n    \"CanBeAwardedAdventGift(AdventCalendar,BasePlayer)\",\r\n    \"CanBeHomingTargeted(AttackHeliPilotFlare)\",\r\n    \"CanBeHomingTargeted(BaseHelicopter)\",\r\n    \"CanBeHomingTargeted(CH47Helicopter)\",\r\n    \"CanBeHomingTargeted(PatrolHelicopter)\",\r\n    \"CanBeHomingTargeted(PlayerHelicopter)\",\r\n    \"CanBeHomingTargeted(RoadFlare)\",\r\n    \"CanBeRecycled(Item,Recycler)\",\r\n    \"CanBeTargeted(BaseCombatEntity,AutoTurret)\",\r\n    \"CanBeTargeted(BaseCombatEntity,HelicopterTurret)\",\r\n    \"CanBeTargeted(BasePlayer,FlameTurret)\",\r\n    \"CanBeTargeted(BasePlayer,GunTrap)\",\r\n    \"CanBeWounded(BasePlayer,HitInfo)\",\r\n    \"CanBradleyApcTarget(BradleyAPC,BaseEntity)\",\r\n    \"CanBuild(Planner,Construction,Construction.Target)\",\r\n    \"CanBypassQueue(Network.Connection)\",\r\n    \"CanCastFishingRod(BasePlayer,BaseFishingRod,Item,UnityEngine.Vector3)\",\r\n    \"CanCatchFish(BasePlayer,BaseFishingRod,Item)\",\r\n    \"CanChangeCode(BasePlayer,CodeLock,string,bool)\",\r\n    \"CanChangeGrade(BasePlayer,BuildingBlock,BuildingGrade.Enum,ulong)\",\r\n    \"CanCheckFuel(EntityFuelSystem,StorageContainer,BasePlayer)\",\r\n    \"CanClientLogin(Network.Connection)\",\r\n    \"CanCombineDroppedItem(DroppedItem,DroppedItem)\",\r\n    \"CanCraft(ItemCrafter,ItemBlueprint,int,bool)\",\r\n    \"CanCraft(PlayerBlueprints,ItemDefinition,int)\",\r\n    \"CanCreateWorldProjectile(HitInfo,ItemDefinition)\",\r\n    \"CanDemolish(BasePlayer,StabilityEntity)\",\r\n    \"CanDeployItem(BasePlayer,Deployer,NetworkableId)\",\r\n    \"CanDeployScientists(BradleyAPC,BaseEntity,System.Collections.Generic.List<GameObjectRef>,System.Collections.Generic.List<UnityEngine.Vector3>)\",\r\n    \"CanDesignFirework(BasePlayer,PatternFirework)\",\r\n    \"CanDestroyLock(BasePlayer,ModularCar,BaseVehicleModule)\",\r\n    \"CanDismountEntity(BasePlayer,BaseMountable)\",\r\n    \"CanDropActiveItem(BasePlayer)\",\r\n    \"CanElevatorLiftMove(ElevatorLift)\",\r\n    \"CanEntityBeHostile(BaseCombatEntity)\",\r\n    \"CanEntityBeHostile(BasePlayer)\",\r\n    \"CanEquipItem(PlayerInventory,Item,int)\",\r\n    \"CanExplosiveStick(TimedExplosive,BaseEntity)\",\r\n    \"CanFastTrackCraftTask(ItemCrafter,ItemCraftTask,int)\",\r\n    \"CanFireLiquidWeapon(BasePlayer,LiquidWeapon)\",\r\n    \"CanHackCrate(BasePlayer,HackableLockedCrate)\",\r\n    \"CanHelicopterDropCrate(CH47HelicopterAIController)\",\r\n    \"CanHelicopterStrafe(PatrolHelicopterAI)\",\r\n    \"CanHelicopterStrafeTarget(PatrolHelicopterAI,BasePlayer)\",\r\n    \"CanHelicopterTarget(PatrolHelicopterAI,BasePlayer)\",\r\n    \"CanHelicopterUseNapalm(PatrolHelicopterAI)\",\r\n    \"CanHideStash(BasePlayer,StashContainer)\",\r\n    \"CanLock(BasePlayer,CodeLock)\",\r\n    \"CanLock(BasePlayer,KeyLock)\",\r\n    \"CanLock(BasePlayer,ModularCar,ModularCarCodeLock)\",\r\n    \"CanLockerAcceptItem(Locker,Item,int)\",\r\n    \"CanLootEntity(BasePlayer,BaseRidableAnimal)\",\r\n    \"CanLootEntity(BasePlayer,ContainerIOEntity)\",\r\n    \"CanLootEntity(BasePlayer,DroppedItemContainer)\",\r\n    \"CanLootEntity(BasePlayer,IndustrialCrafter)\",\r\n    \"CanLootEntity(BasePlayer,LootableCorpse)\",\r\n    \"CanLootEntity(BasePlayer,ResourceContainer)\",\r\n    \"CanLootEntity(BasePlayer,StorageContainer)\",\r\n    \"CanLootEntity(BasePlayer,WorldItem)\",\r\n    \"CanLootPlayer(BasePlayer,BasePlayer)\",\r\n    \"CanMountEntity(BasePlayer,BaseMountable)\",\r\n    \"CanMoveItem(Item,PlayerInventory,ItemContainerId,int,int,ItemMoveModifier)\",\r\n    \"CanNetworkTo(BaseNetworkable,BasePlayer)\",\r\n    \"CanNetworkTo(BasePlayer,BasePlayer)\",\r\n    \"CanNpcEat(BaseNpc,BaseEntity)\",\r\n    \"CanPickupEntity(BasePlayer,BaseCombatEntity)\",\r\n    \"CanPickupEntity(BasePlayer,DoorCloser)\",\r\n    \"CanPickupLock(BasePlayer,BaseLock)\",\r\n    \"CanPurchaseItem(BasePlayer,Item,System.Action<BasePlayer, Item>,VendingMachine,ItemContainer)\",\r\n    \"CanReceiveCall(PhoneController)\",\r\n    \"CanRecycle(Recycler,Item)\",\r\n    \"CanRenameBed(BasePlayer,SleepingBag,string)\",\r\n    \"CanResearchItem(BasePlayer,Item)\",\r\n    \"CanSamSiteShoot(SamSite)\",\r\n    \"CanSeeStash(BasePlayer,StashContainer)\",\r\n    \"CanSetBedPublic(BasePlayer,SleepingBag)\",\r\n    \"CanSetRelationship(BasePlayer,BasePlayer,RelationshipManager.RelationshipType,int)\",\r\n    \"CanSpectateTarget(BasePlayer,string)\",\r\n    \"CanStackItem(Item,Item)\",\r\n    \"CanSwapToSeat(BasePlayer,BaseMountable)\",\r\n    \"CanSwapToSeat(BasePlayer,ModularCarSeat)\",\r\n    \"CanTakeCutting(BasePlayer,GrowableEntity)\",\r\n    \"CanTrainCarCouple(TrainCar,TrainCar)\",\r\n    \"CanUnlock(BasePlayer,CodeLock)\",\r\n    \"CanUnlock(BasePlayer,KeyLock)\",\r\n    \"CanUnlock(BasePlayer,ModularCarCodeLock,string)\",\r\n    \"CanUnlockTechTreeNode(BasePlayer,TechTreeData.NodeInstance,TechTreeData)\",\r\n    \"CanUnlockTechTreeNodePath(BasePlayer,TechTreeData.NodeInstance,TechTreeData)\",\r\n    \"CanUpdateSign(BasePlayer,CarvablePumpkin)\",\r\n    \"CanUpdateSign(BasePlayer,PhotoFrame)\",\r\n    \"CanUpdateSign(BasePlayer,Signage)\",\r\n    \"CanUseFuel(EntityFuelSystem,StorageContainer,float,float)\",\r\n    \"CanUseGesture(BasePlayer,GestureConfig)\",\r\n    \"CanUseHBHFSensor(BasePlayer,HBHFSensor)\",\r\n    \"CanUseHelicopter(BasePlayer,CH47HelicopterAIController)\",\r\n    \"CanUseLockedEntity(BasePlayer,CodeLock)\",\r\n    \"CanUseLockedEntity(BasePlayer,KeyLock)\",\r\n    \"CanUseMailbox(BasePlayer,Mailbox)\",\r\n    \"CanUseUI(BasePlayer,string)\",\r\n    \"CanUseVending(BasePlayer,VendingMachine)\",\r\n    \"CanUseWires(BasePlayer)\",\r\n    \"CanUserLogin(string,string,string)\",\r\n    \"CanVendingAcceptItem(VendingMachine,Item,int)\",\r\n    \"CanWaterBallSplash(ItemDefinition,UnityEngine.Vector3,float,int)\",\r\n    \"CanWearItem(PlayerInventory,Item,int)\",\r\n    \"ICanPickupEntity(BasePlayer,DoorCloser)\",\r\n    \"IOnBaseCombatEntityHurt(BaseCombatEntity,HitInfo)\",\r\n    \"IOnBasePlayerAttacked(BasePlayer,HitInfo)\",\r\n    \"IOnBasePlayerHurt(BasePlayer,HitInfo)\",\r\n    \"IOnCupboardAuthorize(ulong,BasePlayer,BuildingPrivlidge)\",\r\n    \"IOnEntitySaved(BaseNetworkable,BaseNetworkable.SaveInfo)\",\r\n    \"IOnLoseCondition(Item,float)\",\r\n    \"IOnNpcTarget(BaseNpc,BaseEntity)\",\r\n    \"IOnPlayerBanned(Network.Connection,AuthResponse)\",\r\n    \"IOnPlayerChat(ulong,string,string,ConVar.Chat.ChatChannel,BasePlayer)\",\r\n    \"IOnPlayerConnected(BasePlayer)\",\r\n    \"IOnRconInitialize()\",\r\n    \"IOnRunCommandLine()\",\r\n    \"IOnServerCommand(ConsoleSystem.Arg)\",\r\n    \"IOnServerInitialized()\",\r\n    \"IOnServerShutdown()\",\r\n    \"IOnUserApprove(Network.Connection)\",\r\n    \"Init()\",\r\n    \"InitLogging()\",\r\n    \"Loaded()\",\r\n    \"OnAIBrainStateSwitch(BaseAIBrain,BaseAIBrain.BasicAIState,BaseAIBrain.BasicAIState)\",\r\n    \"OnAIBrainStateSwitched(BaseAIBrain,BaseAIBrain.BasicAIState)\",\r\n    \"OnActiveItemChange(BasePlayer,Item,ItemId)\",\r\n    \"OnActiveItemChanged(BasePlayer,Item,Item)\",\r\n    \"OnAddVendingOffer(VendingMachine,ProtoBuf.VendingMachine.SellOrder)\",\r\n    \"OnAdventGiftAward(AdventCalendar,BasePlayer)\",\r\n    \"OnAdventGiftAwarded(AdventCalendar,BasePlayer)\",\r\n    \"OnAirdrop(CargoPlane,UnityEngine.Vector3)\",\r\n    \"OnAmmoSwitch(BaseProjectile,BasePlayer,ItemDefinition)\",\r\n    \"OnAmmoUnload(BaseProjectile,Item,BasePlayer)\",\r\n    \"OnAnalysisComplete(SurveyCrater,BasePlayer)\",\r\n    \"OnApplicationCommand(BasePlayer,string,string[])\",\r\n    \"OnApplicationCommand(Oxide.Core.Libraries.Covalence.IPlayer,string,string[])\",\r\n    \"OnArcadeScoreAdded(BaseArcadeMachine,BasePlayer,int)\",\r\n    \"OnBackpackDrop(Item,PlayerInventory)\",\r\n    \"OnBedMade(SleepingBag,BasePlayer)\",\r\n    \"OnBigWheelLoss(BigWheelGame,Item,BigWheelBettingTerminal)\",\r\n    \"OnBigWheelWin(BigWheelGame,Item,BigWheelBettingTerminal,int)\",\r\n    \"OnBoatPathGenerate()\",\r\n    \"OnBonusItemDrop(Item,BasePlayer)\",\r\n    \"OnBonusItemDropped(Item,BasePlayer)\",\r\n    \"OnBookmarkAdd(ComputerStation,BasePlayer,string)\",\r\n    \"OnBookmarkControl(ComputerStation,BasePlayer,string,IRemoteControllable)\",\r\n    \"OnBookmarkControlEnd(ComputerStation,BasePlayer,BaseEntity)\",\r\n    \"OnBookmarkControlEnded(ComputerStation,BasePlayer,BaseEntity)\",\r\n    \"OnBookmarkControlEnded(ComputerStation,BasePlayer,IRemoteControllable)\",\r\n    \"OnBookmarkControlStarted(ComputerStation,BasePlayer,string,IRemoteControllable)\",\r\n    \"OnBookmarkDelete(ComputerStation,BasePlayer,string)\",\r\n    \"OnBookmarkInput(ComputerStation,BasePlayer,InputState)\",\r\n    \"OnBookmarksSendControl(ComputerStation,BasePlayer,string)\",\r\n    \"OnBoomboxStationUpdate(BoomBox,string,BasePlayer)\",\r\n    \"OnBoomboxStationUpdated(BoomBox,string,BasePlayer)\",\r\n    \"OnBoomboxStationValidate(string)\",\r\n    \"OnBoomboxToggle(BoomBox,BasePlayer,bool)\",\r\n    \"OnBradleyApcHunt(BradleyAPC)\",\r\n    \"OnBradleyApcInitialize(BradleyAPC)\",\r\n    \"OnBradleyApcPatrol(BradleyAPC)\",\r\n    \"OnBradleyApcThink(BradleyAPC)\",\r\n    \"OnBroadcastCommand(string,object[])\",\r\n    \"OnBuildingMerge(ServerBuildingManager,BuildingManager.Building,BuildingManager.Building)\",\r\n    \"OnBuildingPrivilege(BaseEntity,OBB)\",\r\n    \"OnBuildingSplit(BuildingManager.Building,uint)\",\r\n    \"OnButtonPress(PressButton,BasePlayer)\",\r\n    \"OnBuyVendingItem(VendingMachine,BasePlayer,int,int)\",\r\n    \"OnCCTVDirectionChange(CCTV_RC,BasePlayer)\",\r\n    \"OnCardSwipe(CardReader,Keycard,BasePlayer)\",\r\n    \"OnCargoPlaneSignaled(BaseEntity,SupplySignal)\",\r\n    \"OnCargoShipEgress(CargoShip)\",\r\n    \"OnCargoShipHarborApproach(CargoShip,CargoNotifier)\",\r\n    \"OnCargoShipHarborArrived(CargoShip)\",\r\n    \"OnCargoShipHarborLeave(CargoShip)\",\r\n    \"OnCargoShipSpawnCrate(CargoShip)\",\r\n    \"OnClanMemberAdded(long,ulong)\",\r\n    \"OnClientAuth(Network.Connection)\",\r\n    \"OnClientCommand(Network.Connection,string)\",\r\n    \"OnClientDisconnect(Network.Connection,string)\",\r\n    \"OnClientDisconnected(Network.Connection,string)\",\r\n    \"OnClientProjectileEffectCreate(Network.Connection,BaseProjectile,string)\",\r\n    \"OnClothingItemChanged(PlayerInventory,Item,bool)\",\r\n    \"OnCoalingTowerGather(CoalingTower,Item)\",\r\n    \"OnCoalingTowerStart(CoalingTower,BasePlayer)\",\r\n    \"OnCodeChange(ModularCar,BasePlayer,string)\",\r\n    \"OnCodeChanged(BasePlayer,CodeLock,string,bool)\",\r\n    \"OnCodeEntered(CodeLock,BasePlayer,string)\",\r\n    \"OnCollectiblePickedup(CollectibleEntity,BasePlayer,Item)\",\r\n    \"OnCollectiblePickup(CollectibleEntity,BasePlayer,bool)\",\r\n    \"OnComposterUpdate(Composter)\",\r\n    \"OnConnectionDequeue(Network.Connection)\",\r\n    \"OnConnectionQueue(Network.Connection)\",\r\n    \"OnConstructionPlace(BaseEntity,Construction,Construction.Target,BasePlayer)\",\r\n    \"OnContainerDropItems(ItemContainer)\",\r\n    \"OnConveyorFiltersChange(IndustrialConveyor,BasePlayer,ProtoBuf.IndustrialConveyor.ItemFilterList)\",\r\n    \"OnCorpsePopulate(NPCPlayer,NPCPlayerCorpse)\",\r\n    \"OnCounterModeToggle(PowerCounter,BasePlayer,bool)\",\r\n    \"OnCounterTargetChange(PowerCounter,BasePlayer,int)\",\r\n    \"OnCrateDropped(HackableLockedCrate)\",\r\n    \"OnCrateHack(HackableLockedCrate)\",\r\n    \"OnCrateHackEnd(HackableLockedCrate)\",\r\n    \"OnCrateLanded(HackableLockedCrate)\",\r\n    \"OnCrateLaptopAttack(HackableLockedCrate,HitInfo)\",\r\n    \"OnCupboardAssign(BuildingPrivlidge,ulong,BasePlayer)\",\r\n    \"OnCupboardAuthorize(BuildingPrivlidge,BasePlayer)\",\r\n    \"OnCupboardAuthorize(VehiclePrivilege,BasePlayer)\",\r\n    \"OnCupboardClearList(BuildingPrivlidge,BasePlayer)\",\r\n    \"OnCupboardClearList(VehiclePrivilege,BasePlayer)\",\r\n    \"OnCupboardDeauthorize(BuildingPrivlidge,BasePlayer)\",\r\n    \"OnCupboardDeauthorize(VehiclePrivilege,BasePlayer)\",\r\n    \"OnCupboardProtectionCalculated(BuildingPrivlidge,float)\",\r\n    \"OnDebrisSpawn(DecayEntity,UnityEngine.Vector3,UnityEngine.Quaternion,bool)\",\r\n    \"OnDecayDamage(DecayEntity)\",\r\n    \"OnDecayHeal(DecayEntity)\",\r\n    \"OnDefaultItemsReceive(PlayerInventory)\",\r\n    \"OnDefaultItemsReceived(PlayerInventory)\",\r\n    \"OnDeleteVendingOffer(VendingMachine,int)\",\r\n    \"OnDemoRecordingStart(string,BasePlayer)\",\r\n    \"OnDemoRecordingStarted(string,BasePlayer)\",\r\n    \"OnDemoRecordingStop(string,BasePlayer)\",\r\n    \"OnDemoRecordingStopped(string,BasePlayer)\",\r\n    \"OnDestroyUI(BasePlayer,string)\",\r\n    \"OnDieselEngineToggle(DieselEngine,BasePlayer)\",\r\n    \"OnDieselEngineToggled(DieselEngine)\",\r\n    \"OnDigitalClockAlarmsSet(DigitalClock,ProtoBuf.DigitalClockMessage)\",\r\n    \"OnDigitalClockRing(DigitalClock)\",\r\n    \"OnDigitalClockRingStop(DigitalClock)\",\r\n    \"OnDispenserBonus(ResourceDispenser,BasePlayer,Item)\",\r\n    \"OnDispenserBonusReceived(ResourceDispenser,BasePlayer,Item)\",\r\n    \"OnDispenserGather(ResourceDispenser,BasePlayer,Item)\",\r\n    \"OnDispenserGathered(ResourceDispenser,BasePlayer,Item)\",\r\n    \"OnDoorClosed(Door,BasePlayer)\",\r\n    \"OnDoorKnocked(Door,BasePlayer)\",\r\n    \"OnDoorKnocked(DoorKnocker,BasePlayer)\",\r\n    \"OnDoorOpened(Door,BasePlayer)\",\r\n    \"OnDroppedItemCombined(DroppedItem)\",\r\n    \"OnElevatorButtonPress(ElevatorLift,BasePlayer,Elevator.Direction,bool)\",\r\n    \"OnElevatorCall(Elevator,Elevator)\",\r\n    \"OnElevatorMove(Elevator,int)\",\r\n    \"OnEngineLoadoutRefresh(Rust.Modular.EngineStorage)\",\r\n    \"OnEngineStart(MotorRowboat,BasePlayer)\",\r\n    \"OnEngineStarted(MotorRowboat,BasePlayer)\",\r\n    \"OnEngineStatsRefresh(VehicleModuleEngine,Rust.Modular.EngineStorage)\",\r\n    \"OnEngineStatsRefreshed(VehicleModuleEngine,Rust.Modular.EngineStorage)\",\r\n    \"OnEntityActiveCheck(BaseEntity,BasePlayer,uint,string)\",\r\n    \"OnEntityBuilt(Planner,UnityEngine.GameObject)\",\r\n    \"OnEntityControl(AutoTurret,ulong)\",\r\n    \"OnEntityControl(PoweredRemoteControlEntity,ulong)\",\r\n    \"OnEntityControl(RemoteControlEntity,ulong)\",\r\n    \"OnEntityDeath(BaseCombatEntity,HitInfo)\",\r\n    \"OnEntityDeath(ResourceEntity,HitInfo)\",\r\n    \"OnEntityDestroy(BradleyAPC)\",\r\n    \"OnEntityDestroy(CH47HelicopterAIController)\",\r\n    \"OnEntityDismounted(BaseMountable,BasePlayer)\",\r\n    \"OnEntityDistanceCheck(BaseEntity,BasePlayer,uint,string,float,bool)\",\r\n    \"OnEntityEnter(TriggerBase,BaseEntity)\",\r\n    \"OnEntityEnter(TriggerComfort,BaseEntity)\",\r\n    \"OnEntityFlagsNetworkUpdate(BaseEntity)\",\r\n    \"OnEntityFromOwnerCheck(BaseEntity,BasePlayer,uint,string)\",\r\n    \"OnEntityGroundMissing(BaseEntity)\",\r\n    \"OnEntityKill(BaseNetworkable)\",\r\n    \"OnEntityLeave(TriggerBase,BaseEntity)\",\r\n    \"OnEntityLeave(TriggerComfort,BaseEntity)\",\r\n    \"OnEntityLoaded(BaseNetworkable,BaseNetworkable.LoadInfo)\",\r\n    \"OnEntityMarkHostile(BaseCombatEntity,float)\",\r\n    \"OnEntityMarkHostile(BasePlayer,float)\",\r\n    \"OnEntityMounted(BaseMountable,BasePlayer)\",\r\n    \"OnEntityPickedUp(BaseCombatEntity,Item,BasePlayer)\",\r\n    \"OnEntityReskin(BaseEntity,ItemSkinDirectory.Skin,BasePlayer)\",\r\n    \"OnEntityReskinned(BaseEntity,ItemSkinDirectory.Skin,BasePlayer)\",\r\n    \"OnEntitySaved(BaseNetworkable,BaseNetworkable.SaveInfo)\",\r\n    \"OnEntitySnapshot(BaseNetworkable,Network.Connection)\",\r\n    \"OnEntitySpawned(BaseNetworkable)\",\r\n    \"OnEntityStabilityCheck(StabilityEntity)\",\r\n    \"OnEntityTakeDamage(BaseCombatEntity,HitInfo)\",\r\n    \"OnEntityTakeDamage(BasePlayer,HitInfo)\",\r\n    \"OnEntityTakeDamage(ResourceEntity,HitInfo)\",\r\n    \"OnEntityVisibilityCheck(BaseEntity,BasePlayer,uint,string,float)\",\r\n    \"OnEventCollectablePickup(BasePlayer,CollectableEasterEgg)\",\r\n    \"OnEventTrigger(TriggeredEventPrefab)\",\r\n    \"OnExcavatorGather(ExcavatorArm,Item)\",\r\n    \"OnExcavatorMiningToggled(ExcavatorArm)\",\r\n    \"OnExcavatorResourceSet(ExcavatorArm,string,BasePlayer)\",\r\n    \"OnExcavatorSuppliesRequest(ExcavatorSignalComputer,BasePlayer)\",\r\n    \"OnExcavatorSuppliesRequested(ExcavatorSignalComputer,BasePlayer,BaseEntity)\",\r\n    \"OnExperimentEnd(Workbench)\",\r\n    \"OnExperimentEnded(Workbench)\",\r\n    \"OnExperimentStart(Workbench,BasePlayer)\",\r\n    \"OnExperimentStarted(Workbench,BasePlayer)\",\r\n    \"OnExplosiveDropped(BasePlayer,BaseEntity,ThrownWeapon)\",\r\n    \"OnExplosiveDud(DudTimedExplosive)\",\r\n    \"OnExplosiveFuseSet(TimedExplosive,float)\",\r\n    \"OnExplosiveThrown(BasePlayer,BaseEntity,ThrownWeapon)\",\r\n    \"OnFeedbackReported(BasePlayer,string,string,Facepunch.Models.ReportType)\",\r\n    \"OnFindBurnable(BaseOven)\",\r\n    \"OnFindSpawnPoint(BasePlayer)\",\r\n    \"OnFireBallDamage(FireBall,BaseCombatEntity,HitInfo)\",\r\n    \"OnFireBallSpread(FireBall,BaseEntity)\",\r\n    \"OnFireworkDamage(BaseFirework,HitInfo)\",\r\n    \"OnFireworkDesignChange(PatternFirework,ProtoBuf.PatternFirework.Design,BasePlayer)\",\r\n    \"OnFireworkDesignChanged(PatternFirework,ProtoBuf.PatternFirework.Design,BasePlayer)\",\r\n    \"OnFireworkExhausted(BaseFirework)\",\r\n    \"OnFireworkStarted(BaseFirework)\",\r\n    \"OnFishCatch(Item,BaseFishingRod,BasePlayer)\",\r\n    \"OnFishCaught(ItemDefinition,BaseFishingRod,BasePlayer)\",\r\n    \"OnFishingRodCast(BaseFishingRod,BasePlayer,Item)\",\r\n    \"OnFishingStopped(BaseFishingRod,BaseFishingRod.FailReason)\",\r\n    \"OnFlameExplosion(FlameExplosive,UnityEngine.Collider)\",\r\n    \"OnFlameThrowerBurn(FlameThrower,BaseEntity)\",\r\n    \"OnFrame()\",\r\n    \"OnFuelAmountCheck(EntityFuelSystem,Item)\",\r\n    \"OnFuelCheck(EntityFuelSystem)\",\r\n    \"OnFuelConsume(BaseOven,Item,ItemModBurnable)\",\r\n    \"OnFuelConsumed(BaseOven,Item,ItemModBurnable)\",\r\n    \"OnFuelItemCheck(EntityFuelSystem,StorageContainer)\",\r\n    \"OnGiveSoldItem(VendingMachine,Item,BasePlayer)\",\r\n    \"OnGroupCreated(string)\",\r\n    \"OnGroupCreated(string,string,int)\",\r\n    \"OnGroupDeleted(string)\",\r\n    \"OnGroupParentSet(string,string)\",\r\n    \"OnGroupPermissionGranted(string,string)\",\r\n    \"OnGroupPermissionRevoked(string,string)\",\r\n    \"OnGroupRankSet(string,int)\",\r\n    \"OnGroupTitleSet(string,string)\",\r\n    \"OnGrowableGather(GrowableEntity,BasePlayer,bool)\",\r\n    \"OnGrowableGathered(GrowableEntity,Item,BasePlayer)\",\r\n    \"OnGrowableStateChange(GrowableEntity,PlantProperties.State)\",\r\n    \"OnHammerHit(BasePlayer,HitInfo)\",\r\n    \"OnHealingItemUse(MedicalTool,BasePlayer)\",\r\n    \"OnHelicopterAttack(CH47HelicopterAIController,HitInfo)\",\r\n    \"OnHelicopterDropCrate(CH47HelicopterAIController)\",\r\n    \"OnHelicopterDropDoorOpen(CH47HelicopterAIController)\",\r\n    \"OnHelicopterOutOfCrates(CH47HelicopterAIController)\",\r\n    \"OnHelicopterRetire(PatrolHelicopterAI)\",\r\n    \"OnHelicopterStrafeEnter(PatrolHelicopterAI,UnityEngine.Vector3,BasePlayer)\",\r\n    \"OnHelicopterTarget(HelicopterTurret,BaseCombatEntity)\",\r\n    \"OnHorseHitch(RidableHorse,HitchTrough.HitchSpot)\",\r\n    \"OnHorseLead(BaseRidableAnimal,BasePlayer)\",\r\n    \"OnHorseUnhitch(RidableHorse,HitchTrough.HitchSpot)\",\r\n    \"OnHotAirBalloonToggle(HotAirBalloon,BasePlayer)\",\r\n    \"OnHotAirBalloonToggled(HotAirBalloon,BasePlayer)\",\r\n    \"OnHuntEventEnd(EggHuntEvent)\",\r\n    \"OnHuntEventStart(EggHuntEvent)\",\r\n    \"OnIORefCleared(IOEntity.IORef,IOEntity)\",\r\n    \"OnIngredientsCollect(ItemCrafter,ItemBlueprint,ItemCraftTask,int,BasePlayer)\",\r\n    \"OnInputUpdate(IOEntity,int,int)\",\r\n    \"OnInterferenceOthersUpdate(AutoTurret)\",\r\n    \"OnInterferenceUpdate(AutoTurret)\",\r\n    \"OnInventoryAmmoFind(PlayerInventory,System.Collections.Generic.List<Item>,Rust.AmmoTypes)\",\r\n    \"OnInventoryAmmoItemFind(PlayerInventory,ItemDefinition)\",\r\n    \"OnInventoryAmmoItemFind(PlayerInventory,Rust.AmmoTypes)\",\r\n    \"OnInventoryItemFind(PlayerInventory,int)\",\r\n    \"OnInventoryItemsCount(PlayerInventory,int)\",\r\n    \"OnInventoryItemsFind(PlayerInventory,int)\",\r\n    \"OnInventoryItemsTake(PlayerInventory,System.Collections.Generic.List<Item>,int,int)\",\r\n    \"OnInventoryNetworkUpdate(PlayerInventory,ItemContainer,ProtoBuf.UpdateItemContainer,PlayerInventory.Type,PlayerInventory.NetworkInventoryMode)\",\r\n    \"OnItemAction(Item,string,BasePlayer)\",\r\n    \"OnItemAddedToContainer(ItemContainer,Item)\",\r\n    \"OnItemCraft(IndustrialCrafter,ItemBlueprint)\",\r\n    \"OnItemCraft(ItemCraftTask,BasePlayer,Item)\",\r\n    \"OnItemCraftCancelled(ItemCraftTask,ItemCrafter)\",\r\n    \"OnItemCraftFinished(ItemCraftTask,Item,ItemCrafter)\",\r\n    \"OnItemDeployed(Deployer,BaseEntity,BaseEntity)\",\r\n    \"OnItemDeployed(Deployer,ItemModDeployable,BaseEntity)\",\r\n    \"OnItemDespawn(Item)\",\r\n    \"OnItemDropped(Item,BaseEntity)\",\r\n    \"OnItemFilter(Item,StorageContainer,int)\",\r\n    \"OnItemLock(Item)\",\r\n    \"OnItemPainted(PaintedItemStorageEntity,Item,BasePlayer,byte[])\",\r\n    \"OnItemPickup(Item,BasePlayer)\",\r\n    \"OnItemRecycle(Item,Recycler)\",\r\n    \"OnItemRecycleAmount(Item,int,Recycler)\",\r\n    \"OnItemRefill(Item,BasePlayer)\",\r\n    \"OnItemRemove(Item)\",\r\n    \"OnItemRemovedFromContainer(ItemContainer,Item)\",\r\n    \"OnItemRepair(BasePlayer,Item)\",\r\n    \"OnItemResearch(ResearchTable,Item,BasePlayer)\",\r\n    \"OnItemResearched(ResearchTable,int)\",\r\n    \"OnItemSkinChange(int,Item,RepairBench,BasePlayer)\",\r\n    \"OnItemSplit(Item,int)\",\r\n    \"OnItemStacked(Item,Item,ItemContainer)\",\r\n    \"OnItemStacked(Item,Item,ItemContainer,int)\",\r\n    \"OnItemSubmit(Item,Mailbox,BasePlayer)\",\r\n    \"OnItemUnlock(Item)\",\r\n    \"OnItemUnwrap(Item,BasePlayer,ItemModUnwrap)\",\r\n    \"OnItemUpgrade(Item,Item,BasePlayer)\",\r\n    \"OnItemUse(Item,int)\",\r\n    \"OnLiftUse(Lift,BasePlayer)\",\r\n    \"OnLiftUse(ProceduralLift,BasePlayer)\",\r\n    \"OnLiquidVesselFill(BaseLiquidVessel,BasePlayer,LiquidContainer)\",\r\n    \"OnLiquidWeaponFired(LiquidWeapon,BasePlayer)\",\r\n    \"OnLiquidWeaponFiringStopped(LiquidWeapon)\",\r\n    \"OnLockRemove(ModularCar,BasePlayer)\",\r\n    \"OnLockerSwap(Locker,int,BasePlayer)\",\r\n    \"OnLootEntity(BasePlayer,BaseEntity)\",\r\n    \"OnLootEntityEnd(BasePlayer,ContainerIOEntity)\",\r\n    \"OnLootEntityEnd(BasePlayer,DroppedItemContainer)\",\r\n    \"OnLootEntityEnd(BasePlayer,ItemBasedFlowRestrictor)\",\r\n    \"OnLootEntityEnd(BasePlayer,LootableCorpse)\",\r\n    \"OnLootEntityEnd(BasePlayer,StorageContainer)\",\r\n    \"OnLootItem(BasePlayer,Item)\",\r\n    \"OnLootNetworkUpdate(PlayerLoot)\",\r\n    \"OnLootPlayer(BasePlayer,BasePlayer)\",\r\n    \"OnLootSpawn(LootContainer)\",\r\n    \"OnLoseCondition(object[])\",\r\n    \"OnMagazineReload(BaseProjectile,IAmmoContainer,BasePlayer)\",\r\n    \"OnMapImageUpdated()\",\r\n    \"OnMapMarkerAdd(BasePlayer,ProtoBuf.MapNote)\",\r\n    \"OnMapMarkerAdded(BasePlayer,ProtoBuf.MapNote)\",\r\n    \"OnMapMarkerRemove(BasePlayer,System.Collections.Generic.List<ProtoBuf.MapNote>,int)\",\r\n    \"OnMapMarkersClear(BasePlayer,System.Collections.Generic.List<ProtoBuf.MapNote>)\",\r\n    \"OnMapMarkersCleared(BasePlayer)\",\r\n    \"OnMaxStackable(Item)\",\r\n    \"OnMeleeAttack(BasePlayer,HitInfo)\",\r\n    \"OnMeleeThrown(BasePlayer,Item)\",\r\n    \"OnMessagePlayer(string,BasePlayer)\",\r\n    \"OnMessagePlayer(string,BasePlayer,ulong)\",\r\n    \"OnMetalDetectorFlagRequest(BaseMetalDetector,UnityEngine.Vector3,BasePlayer)\",\r\n    \"OnMissionAssigned(BaseMission,IMissionProvider,BasePlayer)\",\r\n    \"OnMissionFailed(BaseMission,BaseMission.MissionInstance,BasePlayer,BaseMission.MissionFailReason)\",\r\n    \"OnMissionStart(BaseMission,BaseMission.MissionInstance,BasePlayer)\",\r\n    \"OnMissionStarted(BaseMission,BaseMission.MissionInstance,BasePlayer)\",\r\n    \"OnMissionSucceeded(BaseMission,BaseMission.MissionInstance,BasePlayer)\",\r\n    \"OnMixingTableToggle(MixingTable,BasePlayer)\",\r\n    \"OnMlrsFire(MLRS,BasePlayer)\",\r\n    \"OnMlrsFired(MLRS,BasePlayer)\",\r\n    \"OnMlrsFiringEnded(MLRS)\",\r\n    \"OnMlrsRocketFired(MLRS,ServerProjectile)\",\r\n    \"OnMlrsTarget(MLRS,UnityEngine.Vector3,BasePlayer)\",\r\n    \"OnMlrsTargetSet(MLRS,UnityEngine.Vector3,BasePlayer)\",\r\n    \"OnNearbyTurretsScan(AutoTurret,System.Collections.Generic.List<AutoTurret>,bool)\",\r\n    \"OnNetworkGroupEntered(BaseNetworkable,Network.Visibility.Group)\",\r\n    \"OnNetworkGroupLeft(BaseNetworkable,Network.Visibility.Group)\",\r\n    \"OnNetworkSubscriptionsGather(NetworkVisibilityGrid,Network.Visibility.Group,System.Collections.Generic.List<Network.Visibility.Group>,int)\",\r\n    \"OnNetworkSubscriptionsUpdate(Network.Networkable,System.Collections.Generic.List<Network.Visibility.Group>,System.Collections.Generic.List<Network.Visibility.Group>)\",\r\n    \"OnNetworkSubscriptionsUpdate(Network.Networkable,System.Collections.Generic.List<Network.Visibility.Group>,unknown)\",\r\n    \"OnNoGoZoneAdded(PatrolHelicopterAI,PatrolHelicopterAI.DangerZone)\",\r\n    \"OnNpcAlert(ScientistNPC)\",\r\n    \"OnNpcAttack(BaseNpc,BaseEntity)\",\r\n    \"OnNpcConversationEnded(NPCTalking,BasePlayer)\",\r\n    \"OnNpcConversationRespond(NPCTalking,BasePlayer,ConversationData,ConversationData.ResponseNode)\",\r\n    \"OnNpcConversationResponded(NPCTalking,BasePlayer,ConversationData,ConversationData.ResponseNode)\",\r\n    \"OnNpcConversationStart(NPCTalking,BasePlayer,ConversationData)\",\r\n    \"OnNpcDuck(HumanNPC)\",\r\n    \"OnNpcEquipWeapon(NPCPlayer,Item)\",\r\n    \"OnNpcEquipWeapon(ScientistNPC,Item)\",\r\n    \"OnNpcGiveSoldItem(NPCVendingMachine,Item,BasePlayer)\",\r\n    \"OnNpcRadioChatter(ScientistNPC)\",\r\n    \"OnNpcTarget(BaseEntity,BaseEntity)\",\r\n    \"OnNpcTarget(BaseNpc,BaseEntity)\",\r\n    \"OnNpcTarget(HumanNPC,BaseEntity)\",\r\n    \"OnNpcTargetSense(BaseEntity,BaseEntity,AIBrainSenses)\",\r\n    \"OnOpenVendingAdmin(VendingMachine,BasePlayer)\",\r\n    \"OnOutputUpdate(IOEntity)\",\r\n    \"OnOvenCook(BaseOven,Item)\",\r\n    \"OnOvenCooked(BaseOven,Item,BaseEntity)\",\r\n    \"OnOvenStart(BaseOven)\",\r\n    \"OnOvenStarted(BaseOven)\",\r\n    \"OnOvenTemperature(BaseOven,int)\",\r\n    \"OnOvenToggle(BaseOven,BasePlayer)\",\r\n    \"OnPatrolHelicopterKill(PatrolHelicopter,HitInfo)\",\r\n    \"OnPatrolHelicopterTakeDamage(PatrolHelicopter,HitInfo)\",\r\n    \"OnPayForPlacement(BasePlayer,Planner,Construction)\",\r\n    \"OnPayForUpgrade(BasePlayer,BuildingBlock,ConstructionGrade)\",\r\n    \"OnPermissionRegistered(string,Oxide.Core.Plugins.Plugin)\",\r\n    \"OnPermissionRegistered(string,Plugin)\",\r\n    \"OnPhoneAnswer(PhoneController,PhoneController)\",\r\n    \"OnPhoneAnswered(PhoneController,PhoneController)\",\r\n    \"OnPhoneCallStart(PhoneController,PhoneController,BasePlayer)\",\r\n    \"OnPhoneCallStarted(PhoneController,PhoneController,BasePlayer)\",\r\n    \"OnPhoneDial(PhoneController,PhoneController,BasePlayer)\",\r\n    \"OnPhoneDialFail(PhoneController,Telephone.DialFailReason,BasePlayer)\",\r\n    \"OnPhoneDialFailed(PhoneController,Telephone.DialFailReason,BasePlayer)\",\r\n    \"OnPhoneDialTimedOut(PhoneController,PhoneController,BasePlayer)\",\r\n    \"OnPhoneDialTimeout(PhoneController,PhoneController,BasePlayer)\",\r\n    \"OnPhoneNameUpdate(PhoneController,string,BasePlayer)\",\r\n    \"OnPhoneNameUpdated(PhoneController,string,BasePlayer)\",\r\n    \"OnPhotoCapture(PhotoEntity,Item,BasePlayer,byte[])\",\r\n    \"OnPhotoCaptured(PhotoEntity,Item,BasePlayer,byte[])\",\r\n    \"OnPlanterBoxFertilize(PlanterBox)\",\r\n    \"OnPlayerAddModifiers(BasePlayer,Item,ItemModConsumable)\",\r\n    \"OnPlayerAssist(BasePlayer,BasePlayer)\",\r\n    \"OnPlayerAttack(BasePlayer,HitInfo)\",\r\n    \"OnPlayerBanned(Network.Connection,string)\",\r\n    \"OnPlayerBanned(string,ulong,string,string,long)\",\r\n    \"OnPlayerChat(BasePlayer,string,ConVar.Chat.ChatChannel)\",\r\n    \"OnPlayerColliderEnable(BasePlayer,UnityEngine.CapsuleCollider)\",\r\n    \"OnPlayerCommand(BasePlayer,string,string[])\",\r\n    \"OnPlayerConnected(BasePlayer)\",\r\n    \"OnPlayerCorpseSpawn(BasePlayer)\",\r\n    \"OnPlayerCorpseSpawned(BasePlayer,PlayerCorpse)\",\r\n    \"OnPlayerDeath(BasePlayer,HitInfo)\",\r\n    \"OnPlayerDig(BasePlayer,BaseDiggableEntity)\",\r\n    \"OnPlayerDisconnected(BasePlayer,string)\",\r\n    \"OnPlayerDismountFailed(BasePlayer,BaseMountable)\",\r\n    \"OnPlayerDrink(BasePlayer,LiquidContainer)\",\r\n    \"OnPlayerDropActiveItem(BasePlayer,Item)\",\r\n    \"OnPlayerHandcuff(BasePlayer,BasePlayer)\",\r\n    \"OnPlayerHandcuffed(BasePlayer,BasePlayer)\",\r\n    \"OnPlayerHealthChange(BasePlayer,float,float)\",\r\n    \"OnPlayerInput(BasePlayer,InputState)\",\r\n    \"OnPlayerKeepAlive(BasePlayer,BasePlayer)\",\r\n    \"OnPlayerKicked(BasePlayer,string,bool)\",\r\n    \"OnPlayerKicked(Network.Connection,string)\",\r\n    \"OnPlayerLand(BasePlayer,float)\",\r\n    \"OnPlayerLanded(BasePlayer,float)\",\r\n    \"OnPlayerLanguageChanged(BasePlayer,string)\",\r\n    \"OnPlayerLanguageChanged(Oxide.Core.Libraries.Covalence.IPlayer,string)\",\r\n    \"OnPlayerLootEnd(PlayerLoot)\",\r\n    \"OnPlayerMarkersSend(BasePlayer,ProtoBuf.MapNoteList)\",\r\n    \"OnPlayerMetabolize(PlayerMetabolism,BaseCombatEntity,float)\",\r\n    \"OnPlayerOfflineChat(ulong,string,string,ConVar.Chat.ChatChannel)\",\r\n    \"OnPlayerPingsSend(BasePlayer,ProtoBuf.MapNoteList)\",\r\n    \"OnPlayerPveDamage(BaseEntity,HitInfo,BuildingBlock)\",\r\n    \"OnPlayerRecover(BasePlayer)\",\r\n    \"OnPlayerRecovered(BasePlayer)\",\r\n    \"OnPlayerReported(BasePlayer,string,string,string,string,string)\",\r\n    \"OnPlayerRespawn(BasePlayer,BasePlayer.SpawnPoint)\",\r\n    \"OnPlayerRespawn(BasePlayer,SleepingBag)\",\r\n    \"OnPlayerRespawned(BasePlayer)\",\r\n    \"OnPlayerRevive(BasePlayer,BasePlayer)\",\r\n    \"OnPlayerSetInfo(Network.Connection,string,string)\",\r\n    \"OnPlayerSleep(BasePlayer)\",\r\n    \"OnPlayerSleepEnd(BasePlayer)\",\r\n    \"OnPlayerSleepEnded(BasePlayer)\",\r\n    \"OnPlayerSpawn(BasePlayer,Network.Connection)\",\r\n    \"OnPlayerSpectate(BasePlayer,string)\",\r\n    \"OnPlayerSpectateEnd(BasePlayer,string)\",\r\n    \"OnPlayerStudyBlueprint(BasePlayer,Item)\",\r\n    \"OnPlayerTick(BasePlayer,PlayerTick,bool)\",\r\n    \"OnPlayerUnbanned(string,ulong,string)\",\r\n    \"OnPlayerViolation(BasePlayer,AntiHackType,float)\",\r\n    \"OnPlayerVoice(BasePlayer,byte[])\",\r\n    \"OnPlayerWantsDismount(BasePlayer,BaseMountable)\",\r\n    \"OnPlayerWantsMount(BasePlayer,BaseMountable)\",\r\n    \"OnPlayerWound(BasePlayer,HitInfo)\",\r\n    \"OnPluginLoaded(Plugin)\",\r\n    \"OnPluginUnloaded(Plugin)\",\r\n    \"OnPortalUse(BasePlayer,BasePortal)\",\r\n    \"OnPortalUsed(BasePlayer,BasePortal)\",\r\n    \"OnProjectileRicochet(BasePlayer,ProtoBuf.PlayerProjectileRicochet)\",\r\n    \"OnQuarryConsumeFuel(MiningQuarry,Item)\",\r\n    \"OnQuarryGather(MiningQuarry,Item)\",\r\n    \"OnQuarryToggle(MiningQuarry,BasePlayer)\",\r\n    \"OnQuarryToggled(MiningQuarry,BasePlayer)\",\r\n    \"OnQueueCycle(int)\",\r\n    \"OnQueueMessage(Network.Connection,int)\",\r\n    \"OnRackedWeaponLoad(Item,ItemDefinition,BasePlayer,WeaponRack)\",\r\n    \"OnRackedWeaponLoaded(Item,ItemDefinition,BasePlayer,WeaponRack)\",\r\n    \"OnRackedWeaponMount(Item,BasePlayer,WeaponRack)\",\r\n    \"OnRackedWeaponMounted(Item,BasePlayer,WeaponRack)\",\r\n    \"OnRackedWeaponSwap(Item,WeaponRackSlot,BasePlayer,WeaponRack)\",\r\n    \"OnRackedWeaponSwapped(Item,WeaponRackSlot,BasePlayer,WeaponRack)\",\r\n    \"OnRackedWeaponTake(Item,BasePlayer,WeaponRack)\",\r\n    \"OnRackedWeaponTaken(Item,BasePlayer,WeaponRack)\",\r\n    \"OnRackedWeaponUnload(Item,BasePlayer,WeaponRack)\",\r\n    \"OnRackedWeaponUnloaded(Item,BasePlayer,WeaponRack)\",\r\n    \"OnRandomItemAward(RandomItemDispenser,RandomItemDispenser.RandomItemChance,BasePlayer,UnityEngine.Vector3)\",\r\n    \"OnRconCommand(System.Net.IPAddress,string,string[])\",\r\n    \"OnRconCommand(System.Net.IPEndPoint,string,string[])\",\r\n    \"OnRconConnection(System.Net.IPAddress)\",\r\n    \"OnRconMessage(System.Net.IPAddress,Oxide.Core.RemoteConsole.RemoteMessage)\",\r\n    \"OnReactiveTargetReset(ReactiveTarget)\",\r\n    \"OnRecyclerToggle(Recycler,BasePlayer)\",\r\n    \"OnRefreshVendingStock(VendingMachine,ItemDefinition)\",\r\n    \"OnRemoteIdentifierUpdate(PoweredRemoteControlEntity,string)\",\r\n    \"OnRemoveDying(GrowableEntity,BasePlayer)\",\r\n    \"OnResearchCostDetermine(Item)\",\r\n    \"OnResearchCostDetermine(ItemDefinition)\",\r\n    \"OnResourceDepositCreated(ResourceDepositManager.ResourceDeposit)\",\r\n    \"OnRespawnInformationGiven(BasePlayer,System.Collections.Generic.List<ProtoBuf.RespawnInformation.SpawnOptions>)\",\r\n    \"OnRfBroadcasterAdd(IRFObject,int)\",\r\n    \"OnRfBroadcasterAdded(IRFObject,int)\",\r\n    \"OnRfBroadcasterRemove(IRFObject,int)\",\r\n    \"OnRfBroadcasterRemoved(IRFObject,int)\",\r\n    \"OnRfFrequencyChange(Detonator,int,BasePlayer)\",\r\n    \"OnRfFrequencyChange(PagerEntity,int,BasePlayer)\",\r\n    \"OnRfFrequencyChange(RFBroadcaster,int,BasePlayer)\",\r\n    \"OnRfFrequencyChange(RFReceiver,int,BasePlayer)\",\r\n    \"OnRfFrequencyChanged(Detonator,int,BasePlayer)\",\r\n    \"OnRfFrequencyChanged(PagerEntity,int,BasePlayer)\",\r\n    \"OnRfFrequencyChanged(RFBroadcaster,int,BasePlayer)\",\r\n    \"OnRfFrequencyChanged(RFReceiver,int,BasePlayer)\",\r\n    \"OnRfListenerAdd(IRFObject,int)\",\r\n    \"OnRfListenerAdded(IRFObject,int)\",\r\n    \"OnRfListenerRemove(IRFObject,int)\",\r\n    \"OnRfListenerRemoved(IRFObject,int)\",\r\n    \"OnRidableAnimalClaim(BaseRidableAnimal,BasePlayer,Item)\",\r\n    \"OnRidableAnimalClaimed(BaseRidableAnimal,BasePlayer)\",\r\n    \"OnRocketLaunched(BasePlayer,BaseEntity)\",\r\n    \"OnRotateVendingMachine(VendingMachine,BasePlayer)\",\r\n    \"OnRunPlayerMetabolism(PlayerMetabolism,BaseCombatEntity,float)\",\r\n    \"OnSamSiteModeToggle(SamSite,BasePlayer,bool)\",\r\n    \"OnSamSiteTarget(SamSite,SamSite.ISamSiteTarget)\",\r\n    \"OnSamSiteTargetScan(SamSite,System.Collections.Generic.List<SamSite.ISamSiteTarget>)\",\r\n    \"OnScientistInitialized(BradleyAPC,ScientistNPC,UnityEngine.Vector3)\",\r\n    \"OnScientistRecalled(BradleyAPC,ScientistNPC)\",\r\n    \"OnSendCommand(Network.Connection,string,object[])\",\r\n    \"OnSendCommand(System.Collections.Generic.List<Network.Connection>,string,object[])\",\r\n    \"OnSendModelState(BasePlayer)\",\r\n    \"OnSensorDetect(HBHFSensor,BasePlayer)\",\r\n    \"OnServerCommand(ConsoleSystem.Arg)\",\r\n    \"OnServerCommand(string,string[])\",\r\n    \"OnServerInformationUpdated()\",\r\n    \"OnServerInitialize()\",\r\n    \"OnServerInitialized(bool)\",\r\n    \"OnServerMessage(string,string,string,ulong)\",\r\n    \"OnServerRestart(string,int)\",\r\n    \"OnServerRestartInterrupt()\",\r\n    \"OnServerSave()\",\r\n    \"OnServerShutdown()\",\r\n    \"OnServerUserRemove(ulong)\",\r\n    \"OnServerUserSet(ulong,ServerUsers.UserGroup,string,string,long)\",\r\n    \"OnShopAcceptClick(ShopFront,BasePlayer)\",\r\n    \"OnShopCancelClick(ShopFront,BasePlayer)\",\r\n    \"OnShopCompleteTrade(ShopFront)\",\r\n    \"OnSignContentCopied(SignContent,ISignage,IUGCBrowserEntity)\",\r\n    \"OnSignLocked(PhotoFrame,BasePlayer)\",\r\n    \"OnSignLocked(Signage,BasePlayer)\",\r\n    \"OnSignUpdated(CarvablePumpkin,BasePlayer)\",\r\n    \"OnSignUpdated(PhotoFrame,BasePlayer)\",\r\n    \"OnSignUpdated(Signage,BasePlayer,int)\",\r\n    \"OnSignalBroadcast(BaseEntity)\",\r\n    \"OnSignalBroadcast(BaseEntity,Network.Connection)\",\r\n    \"OnSleepingBagDestroy(SleepingBag,ulong)\",\r\n    \"OnSleepingBagDestroyed(SleepingBag,ulong)\",\r\n    \"OnSleepingBagValidCheck(SleepingBag,ulong,bool)\",\r\n    \"OnSolarPanelSunUpdate(SolarPanel,int)\",\r\n    \"OnSpinWheel(BasePlayer,SpinnerWheel)\",\r\n    \"OnSprayCreate(SprayCan,UnityEngine.Vector3,UnityEngine.Quaternion)\",\r\n    \"OnSprayRemove(SprayCanSpray,BasePlayer)\",\r\n    \"OnSprinklerSplashed(Sprinkler)\",\r\n    \"OnStashExposed(StashContainer,BasePlayer)\",\r\n    \"OnStashHidden(StashContainer,BasePlayer)\",\r\n    \"OnStashOcclude(StashContainer)\",\r\n    \"OnStructureDemolish(StabilityEntity,BasePlayer,bool)\",\r\n    \"OnStructureRepair(BaseCombatEntity,BasePlayer)\",\r\n    \"OnStructureRotate(BuildingBlock,BasePlayer)\",\r\n    \"OnStructureUpgrade(BuildingBlock,BasePlayer,BuildingGrade.Enum,ulong)\",\r\n    \"OnStructureUpgraded(BuildingBlock,BasePlayer,BuildingGrade.Enum,ulong)\",\r\n    \"OnSupplyDropDropped(BaseEntity,CargoPlane)\",\r\n    \"OnSupplyDropLanded(SupplyDrop)\",\r\n    \"OnSurveyGather(SurveyCharge,Item)\",\r\n    \"OnSwitchToggle(ElectricSwitch,BasePlayer)\",\r\n    \"OnSwitchToggle(FuelGenerator,BasePlayer)\",\r\n    \"OnSwitchToggle(IndustrialConveyor,BasePlayer)\",\r\n    \"OnSwitchToggled(ElectricSwitch,BasePlayer)\",\r\n    \"OnSwitchToggled(FuelGenerator,BasePlayer)\",\r\n    \"OnSwitchToggled(IndustrialConveyor,BasePlayer)\",\r\n    \"OnTakeCurrencyItem(NPCVendingMachine,Item)\",\r\n    \"OnTakeCurrencyItem(VendingMachine,Item)\",\r\n    \"OnTeamAcceptInvite(RelationshipManager.PlayerTeam,BasePlayer)\",\r\n    \"OnTeamCreate(BasePlayer)\",\r\n    \"OnTeamCreated(BasePlayer,RelationshipManager.PlayerTeam)\",\r\n    \"OnTeamDisband(RelationshipManager.PlayerTeam)\",\r\n    \"OnTeamDisbanded(RelationshipManager.PlayerTeam)\",\r\n    \"OnTeamInvite(BasePlayer,BasePlayer)\",\r\n    \"OnTeamKick(RelationshipManager.PlayerTeam,BasePlayer,ulong)\",\r\n    \"OnTeamLeave(RelationshipManager.PlayerTeam,BasePlayer)\",\r\n    \"OnTeamPromote(RelationshipManager.PlayerTeam,BasePlayer)\",\r\n    \"OnTeamRejectInvite(BasePlayer,RelationshipManager.PlayerTeam)\",\r\n    \"OnTeamUpdate(ulong,ulong,BasePlayer)\",\r\n    \"OnTeamUpdated(ulong,ProtoBuf.PlayerTeam,BasePlayer)\",\r\n    \"OnTechTreeNodeUnlock(Workbench,TechTreeData.NodeInstance,BasePlayer)\",\r\n    \"OnTechTreeNodeUnlocked(Workbench,TechTreeData.NodeInstance,BasePlayer)\",\r\n    \"OnTerrainCreate(TerrainGenerator)\",\r\n    \"OnTerrainInitialized()\",\r\n    \"OnThreatLevelUpdate(BasePlayer)\",\r\n    \"OnTick()\",\r\n    \"OnTimedExplosiveExplode(TimedExplosive,UnityEngine.Vector3)\",\r\n    \"OnToggleVendingBroadcast(VendingMachine,BasePlayer)\",\r\n    \"OnTrainCarUncouple(TrainCar,BasePlayer)\",\r\n    \"OnTrapArm(BearTrap,BasePlayer)\",\r\n    \"OnTrapDisarm(Landmine,BasePlayer)\",\r\n    \"OnTrapSnapped(BaseTrapTrigger,UnityEngine.GameObject,UnityEngine.Collider)\",\r\n    \"OnTrapTrigger(BearTrap,UnityEngine.GameObject)\",\r\n    \"OnTrapTrigger(Landmine,UnityEngine.GameObject)\",\r\n    \"OnTreeMarkerHit(TreeEntity,HitInfo)\",\r\n    \"OnTurretAssign(AutoTurret,ulong,BasePlayer)\",\r\n    \"OnTurretAssigned(AutoTurret,ulong,BasePlayer)\",\r\n    \"OnTurretAuthorize(AutoTurret,BasePlayer)\",\r\n    \"OnTurretClearList(AutoTurret,BasePlayer)\",\r\n    \"OnTurretDeauthorize(AutoTurret,BasePlayer)\",\r\n    \"OnTurretIdentifierSet(AutoTurret,BasePlayer,string)\",\r\n    \"OnTurretModeToggle(AutoTurret,BasePlayer)\",\r\n    \"OnTurretRotate(AutoTurret,BasePlayer)\",\r\n    \"OnTurretShutdown(AutoTurret)\",\r\n    \"OnTurretStartup(AutoTurret)\",\r\n    \"OnTurretTarget(AutoTurret,BaseCombatEntity)\",\r\n    \"OnTurretToggle(AutoTurret)\",\r\n    \"OnUserApprove(Network.Connection)\",\r\n    \"OnUserApproved(string,string,string)\",\r\n    \"OnUserBanned(string,string,string,string)\",\r\n    \"OnUserBanned(string,string,string,string,long)\",\r\n    \"OnUserChat(Oxide.Core.Libraries.Covalence.IPlayer,string)\",\r\n    \"OnUserCommand(Oxide.Core.Libraries.Covalence.IPlayer,string,string[])\",\r\n    \"OnUserConnected(IPlayer)\",\r\n    \"OnUserConnected(Oxide.Core.Libraries.Covalence.IPlayer)\",\r\n    \"OnUserDisconnected(IPlayer)\",\r\n    \"OnUserDisconnected(Oxide.Core.Libraries.Covalence.IPlayer,string)\",\r\n    \"OnUserGroupAdded(string,string)\",\r\n    \"OnUserGroupRemoved(string,string)\",\r\n    \"OnUserKicked(IPlayer,string)\",\r\n    \"OnUserKicked(Oxide.Core.Libraries.Covalence.IPlayer,string)\",\r\n    \"OnUserNameUpdated(string,string,string)\",\r\n    \"OnUserPermissionGranted(string,string)\",\r\n    \"OnUserPermissionRevoked(string,string)\",\r\n    \"OnUserRespawn(IPlayer)\",\r\n    \"OnUserRespawn(Oxide.Core.Libraries.Covalence.IPlayer)\",\r\n    \"OnUserRespawned(IPlayer)\",\r\n    \"OnUserRespawned(Oxide.Core.Libraries.Covalence.IPlayer)\",\r\n    \"OnUserUnbanned(string,string,string)\",\r\n    \"OnVehicleHornPressed(VehicleModuleSeating,BasePlayer)\",\r\n    \"OnVehicleLockRequest(ModularCarGarage,BasePlayer,string)\",\r\n    \"OnVehicleLockableCheck(ModularCarCodeLock)\",\r\n    \"OnVehicleModuleDeselected(ModularCarGarage,BasePlayer)\",\r\n    \"OnVehicleModuleMove(BaseVehicleModule,BaseModularVehicle,BasePlayer)\",\r\n    \"OnVehicleModuleSelect(Item,ModularCarGarage,BasePlayer)\",\r\n    \"OnVehicleModuleSelected(Item,ModularCarGarage,BasePlayer)\",\r\n    \"OnVehicleModulesAssign(ModularCar,Rust.Modular.ItemModVehicleModule[])\",\r\n    \"OnVehicleModulesAssigned(ModularCar,Rust.Modular.ItemModVehicleModule[])\",\r\n    \"OnVehiclePush(BaseVehicle,BasePlayer)\",\r\n    \"OnVendingShopOpen(InvisibleVendingMachine,BasePlayer)\",\r\n    \"OnVendingShopOpen(NPCVendingMachine,BasePlayer)\",\r\n    \"OnVendingShopOpen(VendingMachine,BasePlayer)\",\r\n    \"OnVendingShopOpened(InvisibleVendingMachine,BasePlayer)\",\r\n    \"OnVendingShopOpened(NPCVendingMachine,BasePlayer)\",\r\n    \"OnVendingShopOpened(VendingMachine,BasePlayer)\",\r\n    \"OnVendingShopRename(VendingMachine,string,BasePlayer)\",\r\n    \"OnVendingTransaction(VendingMachine,BasePlayer,int,int,ItemContainer)\",\r\n    \"OnWallpaperRemove(BuildingBlock,int)\",\r\n    \"OnWallpaperSet(BuildingBlock,ulong,int)\",\r\n    \"OnWaterCollect(WaterCatcher)\",\r\n    \"OnWaterCollect(WaterPump,ItemDefinition)\",\r\n    \"OnWaterPurified(WaterPurifier,float)\",\r\n    \"OnWaterPurify(WaterPurifier,float)\",\r\n    \"OnWeaponFired(BaseProjectile,BasePlayer,ItemModProjectile,ProtoBuf.ProjectileShoot)\",\r\n    \"OnWeaponModChange(BaseProjectile,BasePlayer)\",\r\n    \"OnWeaponReload(BaseProjectile,BasePlayer)\",\r\n    \"OnWildlifeTrap(SurvivalFishTrap,ItemDefinition)\",\r\n    \"OnWildlifeTrap(WildlifeTrap,TrappableWildlife)\",\r\n    \"OnWindmillUpdate(ElectricWindmill)\",\r\n    \"OnWindmillUpdated(ElectricWindmill)\",\r\n    \"OnWireClear(BasePlayer,IOEntity,int,IOEntity,bool)\",\r\n    \"OnWireConnect(BasePlayer,IOEntity,int,IOEntity,int,System.Collections.Generic.List<UnityEngine.Vector3>,System.Collections.Generic.List<float>)\",\r\n    \"OnWorldPrefabSpawned(UnityEngine.GameObject,string)\",\r\n    \"OnWorldProjectileCreate(HitInfo,Item)\",\r\n    \"OnXmasGiftsDistribute(XMasRefill,BasePlayer)\",\r\n    \"OnXmasLootDistribute(XMasRefill)\",\r\n    \"OnXmasStockingFill(Stocking)\",\r\n    \"Unload()\",\r\n    \"hookName()\",\r\n    \"hookName(T0)\",\r\n    \"hookName(T0,T1)\",\r\n    \"hookName(T0,T1,T2)\",\r\n    \"hookName(T0,T1,T2,T3)\",\r\n    \"objectCanUserLogin(string,string,string)\",\r\n    \"objectOnUserChat(IPlayer,string)\",\r\n    \"objectOnUserCommand(IPlayer,string,string[])\",\r\n    \"protectedoverrideLoadDefaultConfig()\",\r\n    \"protectedoverrideLoadDefaultMessages()\"\r\n  ]\r\n}";

        /// <summary>
        /// Gets the list of hooks as a strongly-typed collection.
        /// </summary>
        public static List<HookModel> GetHooks()
        {
            try
            {
                using var doc = JsonDocument.Parse(Json);
                var hooks = new List<HookModel>();

                foreach (var hook in doc.RootElement.GetProperty("hooks").EnumerateArray())
                {
                    var hookString = hook.GetString();
                    if (string.IsNullOrWhiteSpace(hookString))
                    {
                        continue;
                    }
                    
                    hooks.Add(HooksUtils.ParseHookString(hookString));
                }

                return hooks;
            }
            catch (Exception ex)
            {
                throw new JsonException("Failed to parse hooks from JSON", ex);
            }
        }
    }
}
